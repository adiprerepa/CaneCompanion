# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import vision_pb2 as vision__pb2


class VisionMicroserviceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AppCall = channel.unary_unary(
        '/helloworld.VisionMicroservice/AppCall',
        request_serializer=vision__pb2.AppRequest.SerializeToString,
        response_deserializer=vision__pb2.AppReply.FromString,
        )
    self.CaneCall = channel.unary_unary(
        '/helloworld.VisionMicroservice/CaneCall',
        request_serializer=vision__pb2.CaneRequest.SerializeToString,
        response_deserializer=vision__pb2.CaneReply.FromString,
        )


class VisionMicroserviceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def AppCall(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CaneCall(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VisionMicroserviceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AppCall': grpc.unary_unary_rpc_method_handler(
          servicer.AppCall,
          request_deserializer=vision__pb2.AppRequest.FromString,
          response_serializer=vision__pb2.AppReply.SerializeToString,
      ),
      'CaneCall': grpc.unary_unary_rpc_method_handler(
          servicer.CaneCall,
          request_deserializer=vision__pb2.CaneRequest.FromString,
          response_serializer=vision__pb2.CaneReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'helloworld.VisionMicroservice', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
